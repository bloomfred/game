import { createSlice } from "@reduxjs/toolkit";
import words from "./randomWord";

export const hangmanSlice = createSlice({
  name: "hangman",
  initialState: {
    words: words,
    displayWord: [],
    wordToGuess: [],
    lettersUsed: [],
    turnsLeft: 10,
    turnsTaken: 0,
    wrongGuesses: 0,
    data: {
      1: {
        userLetter: "",
        completed: false,
      },
    },
    // Add available letters
    availableLetters: "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
  },

  reducers: {
    startGame: (state, action) => {
      // Log that the game has started / reset
      console.log("Game starter / reset");

      console.log("State words" + state.words);
      // Generate a random index between 0 and the length of the words array
      const randomIndex = Math.floor(Math.random() * state.words.length);
      console.log("randomIndex:", randomIndex);

      // Get the word at the randomly generated index, convert it to uppercase,
      // remove any newline characters, and split it into an array of letters
      state.wordToGuess = state.words[randomIndex].toUpperCase().trim().split("");
      console.log(state.wordToGuess);

      // Reset letter used
      state.lettersUsed = [];

      // Reset turns left
      state.turnsLeft = 10;

      // Reset turns taken
      state.turnsTaken = 0;

      // Reset wrong guesess
      state.wrongGuesses = 0;

      // Reset the display word
      state.displayWord = new Array(state.wordToGuess.length).fill("_");
    },

    // Make a guess - Work out if the user has guessed correclty or not
    makeAGuess: (state, action) => {
        console.log("makeAGuess called");
        console.log("Payload:", action.payload);
        const { userLetter } = action.payload;

        // If the letter is in the word, update the display word
        if (state.wordToGuess.includes(userLetter)) {
        const newDisplayWord = [...state.displayWord];
        state.wordToGuess.forEach((char, index) => {
            if (char === userLetter) {
                newDisplayWord[index] = userLetter;
            }
        });
        state.displayWord = newDisplayWord;        
        }
        // Decrease turns left by 1
        if (!state.wordToGuess.includes(userLetter)) {
            state.turnsLeft--;        
        }

      console.log("Word to guess" + state.wordToGuess);
      console.log("Display word" + state.displayWord);
      
      if (state.wordToGuess.join('') === state.displayWord.join('')) {
        const wordGuessed = state.wordToGuess.join('');
        alert(`You won! The word was ${wordGuessed}`);
      }

      // Check if the user's guess is incorrect
      if (!state.wordToGuess.includes(userLetter)) {
        console.log("Wrong letter guessed!");
        state.wrongGuesses += 1;
      }

      // Add the letter to the used letters array
      state.lettersUsed.push(userLetter);

      // Increase turns taken by 1
      state.turnsTaken++;      

      // If turns left is 0 then game over
      if (state.turnsLeft === 0) {
        state.data.completed = { completed: true };
        const wordGuessed = state.wordToGuess.join('');
        console.log("Game over!");
        alert(`Game over! The word you were looking for was ${wordGuessed}`);
        // Start new game
      } else {
        state.data.completed = { completed: false };
        console.log("Guess again!");
      }
      
    },
    
    // Increase the wrong guesses by 1
    incrementWrongGuesses: (state) => {
      state.wrongGuesses += 1;
    },

    updateDisplayWord: (state, action) => {
    state.displayWord = action.payload;
    },
},
});

// Export the action creators generated by createSlice()
export const { startGame, makeAGuess, setWords, updateDisplayWord, incrementWrongGuesses } = hangmanSlice.actions;

// Export the reducer function generated by createSlice()
export default hangmanSlice.reducer;

